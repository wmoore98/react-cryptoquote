{"version":3,"sources":["components/Navbar.tsx","components/Character.tsx","components/Space.tsx","components/Punctuation.tsx","components/CryptoQuote.tsx","components/About.tsx","components/Login.tsx","components/Logout.tsx","components/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","props","className","user","paths","map","to","text","key","exact","activeClassName","Character","topChar","bottomChar","onClick","isSelected","Space","Punctuation","char","quoteCategory","INITIAL_GAME_STATE","data","selectedPlainChar","selectedEncryptedChar","alphaArray","Array","from","CryptoQuote","game","gameState","setGameState","isLoaded","setIsLoaded","isWinner","setIsWinner","undoGameState","setUndoGameState","redoGameState","setRedoGameState","augmentData","augAuthor","author","toUpperCase","augQuote","quote","encryptMap","keys","values","forEach","index","value","Math","floor","random","length","splice","generateCryptoMap","guessMap","reverseGuessMap","category","useEffect","a","categories","Object","randomCat","axios","get","response","console","log","augmentedData","getRandomQuote","win","split","every","newMove","move","undoGS","push","plainChar","encryptedChar","reverseMap","oldGuess","generateReverseMap","updateGuessMap","undoMove","lastGameState","pop","redoGS","redoMove","nextGameState","selectEncryptedChar","setTimeout","selectPlainChar","renderString","str","type","result","word","wordIndex","style","display","charIndex","guessChar","handleInputFieldChange","e","handleKeyPress","keyPressed","test","setFocus","inputField","document","getElementById","focus","renderCategory","renderQuote","renderAuthor","renderGuessMap","id","onKeyPress","onChange","width","height","border","disabled","About","Login","useState","userName","password","formData","setFormData","handleChange","evt","target","name","newFormData","action","setUser","routerProps","history","replace","Logout","Fragment","Routes","path","render","App","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56cc443d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Navbar.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ninterface NavbarProps {\r\n  paths: { to: string; text: string }[];\r\n  user: string;\r\n}\r\n\r\nexport default function Navbar(props: NavbarProps): JSX.Element {\r\n  return (\r\n    <header className='Navbar'>\r\n      <div className='Navbar-logo'>EncryptedQuote</div>\r\n      {props.user ? <div>{props.user}</div> : null}\r\n      <nav>\r\n        <ul>\r\n          {props.paths.map(({ to, text }) => (\r\n            <li key={to}>\r\n              <NavLink\r\n                exact\r\n                className='Navbar-link'\r\n                activeClassName='Navbar-active'\r\n                to={to}\r\n              >\r\n                {text}\r\n              </NavLink>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Character.css';\r\n\r\ninterface CharacterProps {\r\n  topChar: string;\r\n  bottomChar: string;\r\n  onClick(bottomChar: string): void;\r\n  isSelected: boolean;\r\n}\r\n\r\nexport default function Character(props: CharacterProps) {\r\n  const { topChar, bottomChar, onClick, isSelected } = props;\r\n\r\n  const handleClick = () => {\r\n    onClick(bottomChar);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Character ${isSelected ? 'Character--selected' : ''}`}\r\n      onClick={handleClick}\r\n    >\r\n      <div className='Character-top'>{topChar}</div>\r\n      <div className='Character-bottom'>{bottomChar}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Space.css';\r\n\r\nexport default function Space() {\r\n  return <div className='Space'></div>;\r\n}\r\n","import React from 'react';\r\n\r\nimport './Punctuation.css';\r\n\r\ninterface PunctuationProps {\r\n  char: string;\r\n}\r\n\r\nexport default function Punctuation(props: PunctuationProps) {\r\n  return (\r\n    <div className='Punctuation'>\r\n      <div className='Punctuation-top'>{props.char}</div>\r\n      <div className='Punctuation-bottom'>{props.char}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, KeyboardEvent, ChangeEvent } from 'react';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport Character from './Character';\r\nimport Space from './Space';\r\nimport Punctuation from './Punctuation';\r\n\r\n// import '../images/undo-solid.svg'\r\nimport './CryptoQuote.css';\r\n\r\ninterface CryptoQuoteProps {\r\n  game: gameType;\r\n}\r\n\r\nexport type gameType = {\r\n  gameState: {\r\n    data: AugmentedData;\r\n    selectedPlainChar: string;\r\n    selectedEncryptedChar: string;\r\n  };\r\n  setGameState: React.Dispatch<\r\n    React.SetStateAction<{\r\n      data: AugmentedData;\r\n      selectedPlainChar: string;\r\n      selectedEncryptedChar: string;\r\n    }>\r\n  >;\r\n  isLoaded: boolean;\r\n  setIsLoaded: React.Dispatch<React.SetStateAction<boolean>>;\r\n  isWinner: boolean;\r\n  setIsWinner: React.Dispatch<React.SetStateAction<boolean>>;\r\n  undoGameState: { guessMap: StringMap; reverseGuessMap: StringMap }[];\r\n  setUndoGameState: React.Dispatch<\r\n    React.SetStateAction<{ guessMap: StringMap; reverseGuessMap: StringMap }[]>\r\n  >;\r\n  redoGameState: { guessMap: StringMap; reverseGuessMap: StringMap }[];\r\n  setRedoGameState: React.Dispatch<\r\n    React.SetStateAction<{ guessMap: StringMap; reverseGuessMap: StringMap }[]>\r\n  >;\r\n};\r\n\r\nenum quoteCategory {\r\n  Movies = 'movies',\r\n  Famous = 'famous'\r\n}\r\n\r\ntype QuoteData = {\r\n  author: string;\r\n  category: quoteCategory;\r\n  quote: string;\r\n};\r\n\r\nexport type AugmentedData = {\r\n  author: string;\r\n  category: quoteCategory;\r\n  quote: string;\r\n  encryptMap: StringMap;\r\n  guessMap: StringMap;\r\n  reverseGuessMap: StringMap;\r\n};\r\n\r\ntype Move = {\r\n  plainChar: string;\r\n  encryptedChar: string;\r\n};\r\n\r\nexport type StringMap = {\r\n  [key: string]: string;\r\n};\r\n\r\nconst INITIAL_GAME_STATE = {\r\n  data: {} as AugmentedData,\r\n  selectedPlainChar: '',\r\n  selectedEncryptedChar: ''\r\n};\r\n\r\nconst alphaArray = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r\n\r\nexport default function CryptoQuote(props: CryptoQuoteProps): JSX.Element {\r\n  const {\r\n    gameState,\r\n    setGameState,\r\n    isLoaded,\r\n    setIsLoaded,\r\n    isWinner,\r\n    setIsWinner,\r\n    undoGameState,\r\n    setUndoGameState,\r\n    redoGameState,\r\n    setRedoGameState\r\n  } = props.game;\r\n\r\n  const augmentData = (data: QuoteData): AugmentedData => {\r\n    const generateCryptoMap = () => {\r\n      const encryptMap = {} as StringMap;\r\n      const guessMap = {} as StringMap;\r\n      const reverseGuessMap = {} as StringMap;\r\n      const keys = [...alphaArray];\r\n      const values = [...alphaArray];\r\n      keys.forEach(key => {\r\n        let index: number;\r\n        let value: string;\r\n        do {\r\n          index = Math.floor(Math.random() * values.length);\r\n          value = values[index];\r\n        } while (key === value);\r\n        encryptMap[key] = value;\r\n        values.splice(index, 1);\r\n      });\r\n\r\n      return [encryptMap, guessMap, reverseGuessMap];\r\n    };\r\n\r\n    const augAuthor = data.author.toUpperCase();\r\n    const augQuote = data.quote.toUpperCase();\r\n    const [encryptMap, guessMap, reverseGuessMap] = generateCryptoMap();\r\n\r\n    const augmentedData = {\r\n      category: data.category,\r\n      author: augAuthor,\r\n      quote: augQuote,\r\n      encryptMap,\r\n      guessMap,\r\n      reverseGuessMap\r\n    };\r\n\r\n    return augmentedData;\r\n  };\r\n\r\n  useEffect((): void => {\r\n    const getRandomQuote = async () => {\r\n      const categories = Object.values(quoteCategory);\r\n      const randomCat = Math.floor(Math.random() * categories.length);\r\n      const category = categories[randomCat];\r\n      const QUOTE_API_URL =\r\n        process.env.NODE_ENV === 'development'\r\n          ? 'http://localhost:3001/api/quotes'\r\n          : 'https://wmoore98-quote.herokuapp.com/api/quotes';\r\n\r\n      const response: AxiosResponse = await axios.get(QUOTE_API_URL);\r\n      console.log(category, response.data);\r\n\r\n      const data = response.data[0] as QuoteData;\r\n      const augmentedData: AugmentedData = augmentData(data);\r\n      setGameState({ ...INITIAL_GAME_STATE, data: augmentedData });\r\n      setIsWinner(false);\r\n      setUndoGameState([]);\r\n      setRedoGameState([]);\r\n      setIsLoaded(true);\r\n    };\r\n    if (!isLoaded) {\r\n      getRandomQuote();\r\n    }\r\n  }, [\r\n    isLoaded,\r\n    setGameState,\r\n    setIsWinner,\r\n    setUndoGameState,\r\n    setRedoGameState,\r\n    setIsLoaded\r\n  ]);\r\n\r\n  useEffect((): void => {\r\n    const { quote, author, guessMap, encryptMap } = gameState.data;\r\n    if (!quote) return;\r\n\r\n    const win = `${quote}${author}`.split('').every(char => {\r\n      return guessMap[char] === encryptMap[char];\r\n    });\r\n\r\n    if (win) setIsWinner(win);\r\n  }, [gameState.data, isWinner, setIsWinner]);\r\n\r\n  const updateGuessMap = ({ plainChar, encryptedChar }: Move): void => {\r\n    const generateReverseMap = (map: {\r\n      [key: string]: string;\r\n    }): { [key: string]: string } => {\r\n      const reverseMap = {} as { [key: string]: string };\r\n\r\n      // remove encryptedChar from guessMap - if previously guessed\r\n      const oldGuess = gameState.data.reverseGuessMap[encryptedChar];\r\n      if (oldGuess) map[oldGuess] = '';\r\n\r\n      Object.keys(map).forEach(key => {\r\n        if (map[key]) reverseMap[map[key]] = key;\r\n      });\r\n      return reverseMap;\r\n    };\r\n\r\n    const data = { ...gameState.data };\r\n    const guessMap = { ...data.guessMap };\r\n    guessMap[plainChar] = encryptedChar;\r\n    const reverseGuessMap = generateReverseMap(guessMap);\r\n    data.guessMap = guessMap;\r\n    data.reverseGuessMap = reverseGuessMap;\r\n\r\n    setGameState({\r\n      ...gameState,\r\n      data,\r\n      selectedPlainChar: '',\r\n      selectedEncryptedChar: ''\r\n    });\r\n  };\r\n\r\n  const newMove = (move: Move): void => {\r\n    const undoGS = [...undoGameState];\r\n    undoGS.push({\r\n      guessMap: { ...gameState.data.guessMap },\r\n      reverseGuessMap: { ...gameState.data.reverseGuessMap }\r\n    });\r\n\r\n    if (redoGameState.length) setRedoGameState([]);\r\n    setUndoGameState(undoGS);\r\n    updateGuessMap(move);\r\n  };\r\n\r\n  const undoMove = (): void => {\r\n    const undoGS = [...undoGameState];\r\n    const lastGameState = undoGS.pop();\r\n\r\n    if (lastGameState) {\r\n      const data = { ...gameState.data };\r\n\r\n      // save current game state for redo\r\n      const redoGS = [...redoGameState];\r\n      redoGS.push({\r\n        guessMap: { ...data.guessMap },\r\n        reverseGuessMap: { ...data.reverseGuessMap }\r\n      });\r\n\r\n      data.guessMap = lastGameState.guessMap;\r\n      data.reverseGuessMap = lastGameState.reverseGuessMap;\r\n\r\n      setRedoGameState(redoGS);\r\n      setUndoGameState(undoGS);\r\n      setGameState({ ...gameState, data });\r\n    }\r\n  };\r\n\r\n  const redoMove = (): void => {\r\n    const redoGS = [...redoGameState];\r\n    const nextGameState = redoGS.pop();\r\n    if (nextGameState) {\r\n      const data = { ...gameState.data };\r\n\r\n      // save current game state for undo\r\n      const undoGS = [...undoGameState];\r\n      undoGS.push({\r\n        guessMap: { ...data.guessMap },\r\n        reverseGuessMap: { ...data.reverseGuessMap }\r\n      });\r\n\r\n      data.guessMap = nextGameState.guessMap;\r\n      data.reverseGuessMap = nextGameState.reverseGuessMap;\r\n\r\n      setUndoGameState(undoGS);\r\n      setRedoGameState(redoGS);\r\n      setGameState({ ...gameState, data });\r\n    }\r\n  };\r\n\r\n  const selectEncryptedChar = (selectedEncryptedChar: string): void => {\r\n    setGameState({ ...gameState, selectedEncryptedChar });\r\n    if (gameState.selectedPlainChar) {\r\n      setTimeout(() => {\r\n        newMove({\r\n          plainChar: gameState.selectedPlainChar,\r\n          encryptedChar: selectedEncryptedChar\r\n        });\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const selectPlainChar = (selectedPlainChar: string): void => {\r\n    setGameState({ ...gameState, selectedPlainChar });\r\n    if (gameState.selectedEncryptedChar) {\r\n      setTimeout(() => {\r\n        newMove({\r\n          plainChar: selectedPlainChar,\r\n          encryptedChar: gameState.selectedEncryptedChar\r\n        });\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const renderString = (str: string, type: string): JSX.Element => {\r\n    const { encryptMap, reverseGuessMap } = gameState.data;\r\n    const result = str.split(' ').map((word, wordIndex) => (\r\n      <div key={`${type}:w${wordIndex}`} style={{ display: 'inline-block' }}>\r\n        {word.split('').map((char, charIndex) => {\r\n          let encryptedChar = encryptMap[char];\r\n          let guessChar = reverseGuessMap[encryptedChar];\r\n          if (!encryptedChar) {\r\n            encryptedChar = char;\r\n            guessChar = char;\r\n            return (\r\n              <Punctuation\r\n                key={`${type}:w${wordIndex}c${charIndex}`}\r\n                char={char}\r\n              />\r\n            );\r\n          } else {\r\n            if (!guessChar) guessChar = '_';\r\n            return (\r\n              <Character\r\n                key={`${type}:w${wordIndex}c${charIndex}`}\r\n                topChar={guessChar}\r\n                bottomChar={encryptedChar}\r\n                onClick={selectEncryptedChar}\r\n                isSelected={encryptedChar === gameState.selectedEncryptedChar}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n        <Space key={`${type}:space${wordIndex}`} />\r\n      </div>\r\n    ));\r\n\r\n    return <>{result}</>;\r\n  };\r\n\r\n  const renderControls = (): JSX.Element => {\r\n    return (\r\n      <section className='CryptoQuote-controls'>\r\n        <span className='undoBtn'>\r\n          <button\r\n            className='btn'\r\n            disabled={!undoGameState.length}\r\n            onClick={undoMove}\r\n          >\r\n            <i className='fas fa-undo'></i>\r\n          </button>\r\n        </span>\r\n        <span className='undoBtn'>\r\n          <button\r\n            className='btn'\r\n            disabled={!redoGameState.length}\r\n            onClick={redoMove}\r\n          >\r\n            <i className='fas fa-redo'></i>\r\n          </button>\r\n        </span>\r\n      </section>\r\n    );\r\n  };\r\n\r\n  const renderInput = (): JSX.Element => {\r\n    return (\r\n      <section className='CryptoQuote-input'>\r\n        <input\r\n          id='inputField'\r\n          onKeyPress={handleKeyPress}\r\n          onChange={handleInputFieldChange}\r\n          value={gameState.selectedEncryptedChar}\r\n          style={{ width: 0, height: 0, border: 'none' }}\r\n        />\r\n        <span className={gameState.selectedPlainChar ? '' : 'active'}>\r\n          {gameState.selectedPlainChar}\r\n        </span>\r\n        {' is encrypted as '}\r\n        <span className={gameState.selectedPlainChar ? 'active' : ''}>\r\n          {gameState.selectedEncryptedChar}\r\n        </span>\r\n      </section>\r\n    );\r\n  };\r\n\r\n  const renderGuessMap = (): JSX.Element => {\r\n    const { guessMap } = gameState.data;\r\n    const result = alphaArray.map(key => (\r\n      <Character\r\n        key={key}\r\n        topChar={guessMap[key] ? guessMap[key] : '_'}\r\n        bottomChar={key}\r\n        onClick={selectPlainChar}\r\n        isSelected={key === gameState.selectedPlainChar}\r\n      />\r\n    ));\r\n\r\n    return <section className='CryptoQuote-guessMap'>{result}</section>;\r\n  };\r\n\r\n  const renderAuthor = (): JSX.Element => {\r\n    const { author } = gameState.data;\r\n    return (\r\n      <section className='CryptoQuote-author'>\r\n        {renderString(author, 'author')}\r\n      </section>\r\n    );\r\n  };\r\n\r\n  const renderQuote = (): JSX.Element => {\r\n    const { quote } = gameState.data;\r\n    return (\r\n      <section className='CryptoQuote-quote'>\r\n        {renderString(quote, 'quote')}\r\n      </section>\r\n    );\r\n  };\r\n\r\n  const renderCategory = (): JSX.Element => {\r\n    const { category } = gameState.data;\r\n    return (\r\n      <section className='CryptoQuote-category'>Category: {category}</section>\r\n    );\r\n  };\r\n\r\n  const handleInputFieldChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    // console.log('onChange', e);\r\n    // console.log(e.target);\r\n  };\r\n\r\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>): void => {\r\n    const keyPressed = e.key.toUpperCase();\r\n    if (keyPressed.length === 1 && /[A-Z]{1}/.test(keyPressed)) {\r\n      if (gameState.selectedPlainChar) selectEncryptedChar(keyPressed);\r\n      else selectPlainChar(keyPressed);\r\n    }\r\n    if (keyPressed === ',') {\r\n      undoMove();\r\n    } else if (keyPressed === '.') {\r\n      redoMove();\r\n    }\r\n  };\r\n\r\n  const setFocus = (): void => {\r\n    const inputField = document.getElementById('inputField');\r\n    if (inputField) inputField.focus();\r\n  };\r\n\r\n  if (document) {\r\n    setFocus();\r\n  }\r\n\r\n  return isLoaded ? (\r\n    <main className='container' onClick={setFocus}>\r\n      <div className='CryptoQuote'>\r\n        {renderCategory()}\r\n        {renderQuote()}\r\n        {renderAuthor()}\r\n        {renderGuessMap()}\r\n        {renderInput()}\r\n        {renderControls()}\r\n        {isWinner ? <div>You solved it!!!</div> : null}\r\n      </div>\r\n    </main>\r\n  ) : (\r\n    <main>Loading...</main>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './About.css';\r\n\r\nexport default function About(): JSX.Element {\r\n  return (\r\n    <main className='container'>\r\n      <h1>About EncryptedQuote</h1>\r\n      <p>\r\n        An famous, inspirational quote and its author are encrypted. One letter\r\n        stands for another; never will a letter stand for itself. For example,\r\n        if 'A' = 'T', 'D' = 'H', and 'P' = 'E', the word, 'THE' would be\r\n        encrypted as 'ADP'.\r\n      </p>\r\n      <p>\r\n        Use your knowledge of the English language and look for clues to help\r\n        you decode the puzzle. For example, if you see a stand-alone character,\r\n        it probably stands for either 'A' or 'I'. Two-letter words will normally\r\n        consist of a vowel and a consonant. Look for other places where the\r\n        letters appear in the puzzle to see where a vowel makes most sense. 'E'\r\n        is the most common English vowel and is often found at the end of words\r\n        as well as in other places. The most common three-letter word in English\r\n        is 'THE'. If you see a three-letter word, check the last letter and see\r\n        where else it appears in the puzzle. If occurs at both the end and other\r\n        places in words, there is a high probability it is an \"E\". 'T' is also a\r\n        common letter, but 'H' is much less common.\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nimport './Login.css';\r\n\r\ninterface LoginProps {\r\n  setUser(user: string): void;\r\n  setIsLoaded(isLoaded: boolean): void;\r\n  routerProps: RouteComponentProps;\r\n}\r\n\r\nexport default function Login(props: LoginProps): JSX.Element {\r\n  const [formData, setFormData] = useState({ userName: '', password: '' });\r\n\r\n  const handleChange = (evt: any) => {\r\n    console.log(evt.target.name, evt.target.value);\r\n    const newFormData = { ...formData, [evt.target.name]: evt.target.value };\r\n    if (newFormData.userName === '') newFormData.password = '';\r\n    setFormData(newFormData);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    props.setUser(formData.userName ? formData.userName : 'guest');\r\n    props.setIsLoaded(false);\r\n    props.routerProps.history.replace('/');\r\n  };\r\n\r\n  return (\r\n    <main className='container Login'>\r\n      <h1>Login</h1>\r\n      <form action=''>\r\n        <label>Username</label>\r\n        <input\r\n          id='userName'\r\n          name='userName'\r\n          value={formData.userName}\r\n          type='text'\r\n          onChange={handleChange}\r\n        />\r\n        <label>Password</label>\r\n        <input\r\n          id='password'\r\n          name='password'\r\n          value={formData.password}\r\n          type='password'\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n      <button onClick={handleClick}>\r\n        Continue as {formData.userName ? formData.userName : 'guest'}\r\n      </button>\r\n    </main>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ninterface LogoutProps {\r\n  setUser(user: string): void;\r\n  routerProps: RouteComponentProps;\r\n}\r\n\r\nexport default function Logout(props: LogoutProps): JSX.Element {\r\n  props.setUser('');\r\n  props.routerProps.history.replace('/');\r\n  return <React.Fragment />;\r\n}\r\n","import React from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport CryptoQuote, { gameType } from './CryptoQuote';\r\nimport About from './About';\r\nimport Login from './Login';\r\nimport Logout from './Logout';\r\n\r\ninterface RoutesProps {\r\n  user: string;\r\n  setUser(user: string): void;\r\n  setIsLoaded(isLoaded: boolean): void;\r\n  game: gameType;\r\n}\r\n\r\nexport default function Routes(props: RoutesProps): JSX.Element {\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path='/'\r\n        render={() =>\r\n          props.user ? (\r\n            <CryptoQuote game={props.game} />\r\n          ) : (\r\n            <Redirect to='/login' />\r\n          )\r\n        }\r\n      />\r\n      <Route exact path='/about' render={() => <About />} />\r\n      <Route\r\n        exact\r\n        path='/login'\r\n        render={routerProps => (\r\n          <Login\r\n            setUser={props.setUser}\r\n            setIsLoaded={props.setIsLoaded}\r\n            routerProps={routerProps}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        exact\r\n        path='/logout'\r\n        render={routerProps => (\r\n          <Logout setUser={props.setUser} routerProps={routerProps} />\r\n        )}\r\n      />\r\n      <Route render={() => <Redirect to={'/'} />} />\r\n    </Switch>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport Routes from './components/Routes';\n\nimport { AugmentedData, StringMap } from './components/CryptoQuote';\n\nconst INITIAL_GAME_STATE = {\n  data: {} as AugmentedData,\n  selectedPlainChar: '',\n  selectedEncryptedChar: ''\n};\n\nconst App: React.FC = () => {\n  // Game - kept in App to persist even when game component is\n  // unmounted, ie, user clicks to other page and back.\n  const [gameState, setGameState] = useState(INITIAL_GAME_STATE);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n  const [undoGameState, setUndoGameState] = useState<\n    {\n      guessMap: StringMap;\n      reverseGuessMap: StringMap;\n    }[]\n  >([]);\n  const [redoGameState, setRedoGameState] = useState<\n    {\n      guessMap: StringMap;\n      reverseGuessMap: StringMap;\n    }[]\n  >([]);\n  //\n\n  const [user, setUser] = useState('');\n  const paths = [{ to: '/', text: 'Game' }, { to: '/about', text: 'About' }];\n  if (user) {\n    paths.push({ to: '/logout', text: 'Logout' });\n  } else {\n    paths.push({ to: '/login', text: 'Login' });\n  }\n\n  return (\n    <div className='App'>\n      <Navbar user={user} paths={paths} />\n      <Routes\n        user={user}\n        setUser={setUser}\n        setIsLoaded={setIsLoaded}\n        game={{\n          gameState,\n          setGameState,\n          isLoaded,\n          setIsLoaded,\n          isWinner,\n          setIsWinner,\n          undoGameState,\n          setUndoGameState,\n          redoGameState,\n          setRedoGameState\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}