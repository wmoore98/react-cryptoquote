{"version":3,"sources":["components/Navbar.tsx","components/Character.tsx","components/Space.tsx","components/Punctuation.tsx","components/CryptoQuote.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","Character","props","topChar","bottomChar","onClick","isSelected","Space","Punctuation","char","quoteCategory","INITIAL_STATE","isLoading","data","selectedPlainChar","selectedEncryptedChar","CryptoQuote","useState","state","setState","isWinner","setIsWinner","augmentData","augAuthor","author","toUpperCase","augQuote","quote","encryptMap","decryptMap","guessMap","reverseGuessMap","keys","Array","from","values","forEach","key","index","value","Math","floor","random","length","splice","generateCryptoMap","category","useEffect","a","categories","Object","randomCat","axios","get","response","console","log","augmentedData","getRandomQuote","win","split","every","updateGuessMap","plainChar","encryptedChar","map","reverseMap","oldGuess","generateReverseMap","selectEncryptedChar","setTimeout","selectPlainChar","renderString","str","type","result","word","wordIndex","style","display","charIndex","guessChar","document","inputField","getElementById","focus","renderGuessMap","renderQuote","id","onKeyPress","e","keyPressed","test","onChange","width","height","border","App","count","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d7ac1bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Navbar.css';\r\n\r\n// interface NavbarProps {\r\n//   plainChar: string;\r\n//   encryptedChar: string;\r\n// }\r\n\r\nexport default function Navbar() {\r\n  return <div className='Navbar'></div>;\r\n}\r\n","import React from 'react';\r\n\r\nimport './Character.css';\r\n\r\ninterface CharacterProps {\r\n  topChar: string;\r\n  bottomChar: string;\r\n  onClick(bottomChar: string): void;\r\n  isSelected: boolean;\r\n}\r\n\r\nexport default function Character(props: CharacterProps) {\r\n  const { topChar, bottomChar, onClick, isSelected } = props;\r\n\r\n  const handleClick = () => {\r\n    onClick(bottomChar);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Character${isSelected ? ' Character--selected' : ''}`}\r\n      onClick={handleClick}\r\n    >\r\n      <div>{topChar}</div>\r\n      <div>{bottomChar}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Space.css';\r\n\r\nexport default function Space() {\r\n  return <div className='Space'></div>;\r\n}\r\n","import React from 'react';\r\n\r\nimport './Punctuation.css';\r\n\r\ninterface PunctuationProps {\r\n  char: string;\r\n}\r\n\r\nexport default function Punctuation(props: PunctuationProps) {\r\n  return (\r\n    <div className='Punctuation'>\r\n      <div>{props.char}</div>\r\n      <div>{props.char}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, KeyboardEvent, ChangeEvent } from 'react';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport Character from './Character';\r\nimport Space from './Space';\r\nimport Punctuation from './Punctuation';\r\n\r\nimport './CryptoQuote.css';\r\n\r\ninterface CryptoQuoteProps {\r\n  count: number;\r\n}\r\n\r\nenum quoteCategory {\r\n  Movies = 'movies',\r\n  Famous = 'famous'\r\n}\r\n\r\ntype QuoteData = {\r\n  author: string;\r\n  category: quoteCategory;\r\n  quote: string;\r\n};\r\n\r\ntype AugmentedData = {\r\n  author: string;\r\n  category: quoteCategory;\r\n  quote: string;\r\n  encryptMap: { [key: string]: string };\r\n  decryptMap: { [key: string]: string };\r\n  guessMap: { [key: string]: string };\r\n  reverseGuessMap: { [key: string]: string };\r\n};\r\n\r\nconst INITIAL_STATE = {\r\n  isLoading: true,\r\n  data: {} as AugmentedData,\r\n  selectedPlainChar: '',\r\n  selectedEncryptedChar: ''\r\n};\r\n\r\nexport default function CryptoQuote(props: CryptoQuoteProps) {\r\n  const [state, setState] = useState(INITIAL_STATE);\r\n  const [isWinner, setIsWinner] = useState(false);\r\n\r\n  const augmentData = (data: QuoteData) => {\r\n    const generateCryptoMap = () => {\r\n      const encryptMap = {} as { [key: string]: string };\r\n      const decryptMap = {} as { [key: string]: string };\r\n      const guessMap = {} as { [key: string]: string };\r\n      const reverseGuessMap = {} as { [key: string]: string };\r\n      const keys = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r\n      const values = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r\n      keys.forEach(key => {\r\n        let index: number;\r\n        let value: string;\r\n        do {\r\n          index = Math.floor(Math.random() * values.length);\r\n          value = values[index];\r\n        } while (key === value);\r\n        encryptMap[key] = value;\r\n        guessMap[key] = '';\r\n        decryptMap[value] = key;\r\n        reverseGuessMap[value] = '';\r\n        values.splice(index, 1);\r\n      });\r\n\r\n      return [encryptMap, decryptMap, guessMap, reverseGuessMap];\r\n    };\r\n\r\n    const augAuthor = data.author.toUpperCase();\r\n    const augQuote = data.quote.toUpperCase();\r\n    const [\r\n      encryptMap,\r\n      decryptMap,\r\n      guessMap,\r\n      reverseGuessMap\r\n    ] = generateCryptoMap();\r\n\r\n    const augmentedData = {\r\n      category: data.category,\r\n      author: augAuthor,\r\n      quote: augQuote,\r\n      encryptMap,\r\n      decryptMap,\r\n      guessMap,\r\n      reverseGuessMap\r\n    };\r\n\r\n    return augmentedData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getRandomQuote = async () => {\r\n      const categories = Object.values(quoteCategory);\r\n      const randomCat = Math.floor(Math.random() * categories.length);\r\n      const category = categories[randomCat];\r\n\r\n      const response: AxiosResponse = await axios.get(\r\n        'https://wmoore98-quote.herokuapp.com/api/quotes'\r\n      );\r\n\r\n      // const response: AxiosResponse = await axios.get(\r\n      //   'http://localhost:3001/api/quotes'\r\n      // );\r\n\r\n      // prevent call to api - limited to 50/ month\r\n      // const response: AxiosResponse = await axios.post(\r\n      //   `https://andruxnet-random-famous-quotes.p.rapidapi.com/?cat=${category}&count=1`,\r\n      //   {},\r\n      //   {\r\n      //     headers: {\r\n      //       'x-rapidapi-host':\r\n      //         'andruxnet-random-famous-quotes.p.rapidapi.com',\r\n      //       'x-rapidapi-key':\r\n      //         '179da4f63fmsh7199f90a6b17cefp1d8281jsnfac455eebacd',\r\n      //       'content-type': 'application/x-www-form-urlencoded'\r\n      //     }\r\n      //   }\r\n      // );\r\n\r\n      // const response = {\r\n      //   data: [\r\n      //     {\r\n      //       author: 'Bjarne Stroustrup',\r\n      //       category: 'Famous',\r\n      //       quote:\r\n      //         'C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do, it blows away your whole leg.'\r\n      //     }\r\n      //   ]\r\n      // };\r\n\r\n      console.log(category, response.data);\r\n\r\n      const data = response.data[0] as QuoteData;\r\n      const augmentedData: AugmentedData = augmentData(data);\r\n      setState({ ...INITIAL_STATE, isLoading: false, data: augmentedData });\r\n    };\r\n    getRandomQuote();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const { quote, guessMap, encryptMap } = state.data;\r\n    if (!quote) return;\r\n\r\n    const win = quote.split('').every(char => {\r\n      return guessMap[char] === encryptMap[char];\r\n    });\r\n\r\n    if (win) setIsWinner(win);\r\n  }, [state.data, isWinner]);\r\n\r\n  const updateGuessMap = (plainChar: string, encryptedChar: string): void => {\r\n    const generateReverseMap = (map: {\r\n      [key: string]: string;\r\n    }): { [key: string]: string } => {\r\n      const reverseMap = {} as { [key: string]: string };\r\n\r\n      // remove encryptedChar from guessMap - if previously guessed\r\n      const oldGuess = state.data.reverseGuessMap[encryptedChar];\r\n      if (oldGuess) map[oldGuess] = '';\r\n\r\n      Object.keys(map).forEach(key => (reverseMap[map[key]] = key));\r\n      return reverseMap;\r\n    };\r\n\r\n    const data = { ...state.data };\r\n    const guessMap = { ...data.guessMap };\r\n    guessMap[plainChar] = encryptedChar;\r\n    const reverseGuessMap = generateReverseMap(guessMap);\r\n    data.guessMap = guessMap;\r\n    data.reverseGuessMap = reverseGuessMap;\r\n\r\n    setState({\r\n      ...state,\r\n      data,\r\n      selectedPlainChar: '',\r\n      selectedEncryptedChar: ''\r\n    });\r\n  };\r\n\r\n  const selectEncryptedChar = (selectedEncryptedChar: string) => {\r\n    setState({ ...state, selectedEncryptedChar });\r\n    if (state.selectedPlainChar) {\r\n      setTimeout(() => {\r\n        updateGuessMap(state.selectedPlainChar, selectedEncryptedChar);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const selectPlainChar = (selectedPlainChar: string) => {\r\n    setState({ ...state, selectedPlainChar });\r\n    if (state.selectedEncryptedChar) {\r\n      setTimeout(() => {\r\n        updateGuessMap(selectedPlainChar, state.selectedEncryptedChar);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const renderGuessMap = () => {\r\n    const { guessMap } = state.data;\r\n    const result = Object.keys(guessMap).map(key => (\r\n      <Character\r\n        key={key}\r\n        topChar={guessMap[key] ? guessMap[key] : '_'}\r\n        bottomChar={key}\r\n        onClick={selectPlainChar}\r\n        isSelected={key === state.selectedPlainChar}\r\n      />\r\n    ));\r\n\r\n    return <div style={{ display: 'inline-block' }}>{result}</div>;\r\n  };\r\n\r\n  const renderString = (str: string, type: string) => {\r\n    const { encryptMap, reverseGuessMap } = state.data;\r\n    const result = str.split(' ').map((word, wordIndex) => (\r\n      <div key={`${type}:w${wordIndex}`} style={{ display: 'inline-block' }}>\r\n        {word.split('').map((char, charIndex) => {\r\n          let encryptedChar = encryptMap[char];\r\n          let guessChar = reverseGuessMap[encryptedChar];\r\n          if (!encryptedChar) {\r\n            encryptedChar = char;\r\n            guessChar = char;\r\n            return (\r\n              <Punctuation\r\n                key={`${type}:w${wordIndex}c${charIndex}`}\r\n                char={char}\r\n              />\r\n            );\r\n          } else {\r\n            if (!guessChar) guessChar = '_';\r\n            return (\r\n              <Character\r\n                key={`${type}:w${wordIndex}c${charIndex}`}\r\n                topChar={guessChar}\r\n                bottomChar={encryptedChar}\r\n                onClick={selectEncryptedChar}\r\n                isSelected={encryptedChar === state.selectedEncryptedChar}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n        <Space key={`${type}:space${wordIndex}`} />\r\n      </div>\r\n    ));\r\n\r\n    return <>{result}</>;\r\n  };\r\n\r\n  const renderQuote = () => {\r\n    const { author, quote, category } = state.data;\r\n    return (\r\n      <div className='CryptoQuote'>\r\n        <div className='CryptoQuote-category'>Category: {category}</div>\r\n        <div className='CryptoQuote-quote'>{renderString(quote, 'quote')}</div>\r\n        <div className='CryptoQuote-author'>\r\n          {renderString(author, 'author')}\r\n        </div>\r\n        <div className='CryptoQuote-guessMap'>{renderGuessMap()}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleInputFieldChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    // console.log('onChange', e);\r\n    // console.log(e.target);\r\n  };\r\n\r\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    const keyPressed = e.key.toUpperCase();\r\n    if (keyPressed.length === 1 && /[A-Z]{1}/.test(keyPressed)) {\r\n      if (state.selectedPlainChar) selectEncryptedChar(keyPressed);\r\n      else selectPlainChar(keyPressed);\r\n    }\r\n  };\r\n\r\n  if (document) {\r\n    const inputField = document.getElementById('inputField');\r\n    if (inputField) inputField.focus();\r\n  }\r\n\r\n  return state.isLoading ? (\r\n    <div>Loading...</div>\r\n  ) : isWinner ? (\r\n    <div>Winner!!!</div>\r\n  ) : (\r\n    <div className='container'>\r\n      {renderQuote()}\r\n      <div>\r\n        <input\r\n          id='inputField'\r\n          onKeyPress={handleKeyPress}\r\n          onChange={handleInputFieldChange}\r\n          value={state.selectedEncryptedChar}\r\n          style={{ width: 0, height: 0, border: 'none' }}\r\n        />\r\n        {state.selectedPlainChar} is encrypted as {state.selectedEncryptedChar}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport CryptoQuote from './components/CryptoQuote';\n\nconst App: React.FC = () => {\n  return (\n    <div className='App'>\n      <Navbar />\n      <CryptoQuote count={1} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}