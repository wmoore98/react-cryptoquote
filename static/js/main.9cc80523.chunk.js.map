{"version":3,"sources":["components/Navbar.tsx","components/Character.tsx","components/Space.tsx","components/Punctuation.tsx","components/CryptoQuote.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","Character","props","topChar","bottomChar","onClick","isSelected","Space","Punctuation","char","quoteCategory","INITIAL_GAME_STATE","data","selectedPlainChar","selectedEncryptedChar","alphaArray","Array","from","CryptoQuote","useState","gameState","setGameState","isLoading","setIsLoading","isWinner","setIsWinner","undoGameState","setUndoGameState","redoGameState","setRedoGameState","augmentData","augAuthor","author","toUpperCase","augQuote","quote","encryptMap","keys","values","forEach","key","index","value","Math","floor","random","length","splice","generateCryptoMap","guessMap","reverseGuessMap","category","useEffect","a","categories","Object","randomCat","response","console","log","augmentedData","getRandomQuote","win","split","every","newMove","move","undoGS","push","plainChar","encryptedChar","map","reverseMap","oldGuess","generateReverseMap","updateGuessMap","undoMove","lastGameState","pop","redoGS","redoMove","nextGameState","selectEncryptedChar","setTimeout","selectPlainChar","renderString","str","type","result","word","wordIndex","style","display","charIndex","guessChar","handleInputFieldChange","e","handleKeyPress","keyPressed","test","setFocus","inputField","document","getElementById","focus","renderCategory","renderQuote","renderAuthor","renderGuessMap","id","onKeyPress","onChange","width","height","border","disabled","App","count","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVASe,SAASA,IACtB,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,eAAf,kBACA,6BACE,4BACE,4BACE,uBAAGA,UAAU,cAAcC,KAAK,KAAhC,SAIF,4BACE,uBAAGD,UAAU,cAAcC,KAAK,KAAhC,UAIF,4BACE,uBAAGD,UAAU,cAAcC,KAAK,KAAhC,e,sDCfG,SAASC,EAAUC,GAAwB,IAChDC,EAA6CD,EAA7CC,QAASC,EAAoCF,EAApCE,WAAYC,EAAwBH,EAAxBG,QAASC,EAAeJ,EAAfI,WAMtC,OACE,yBACEP,UAAS,oBAAeO,EAAa,sBAAwB,IAC7DD,QAPgB,WAClBA,EAAQD,KAQN,yBAAKL,UAAU,iBAAiBI,GAChC,yBAAKJ,UAAU,oBAAoBK,I,MCpB1B,SAASG,IACtB,OAAO,yBAAKR,UAAU,U,MCGT,SAASS,EAAYN,GAClC,OACE,yBAAKH,UAAU,eACb,yBAAKA,UAAU,mBAAmBG,EAAMO,MACxC,yBAAKV,UAAU,sBAAsBG,EAAMO,O,ICC5CC,E,ykBAAAA,K,gBAAAA,E,iBAAAA,M,KAyBL,IAAMC,EAAqB,CACzBC,KAAM,GACNC,kBAAmB,GACnBC,sBAAuB,IAGnBC,EAAaC,MAAMC,KAAK,8BAEf,SAASC,EAAYhB,GAAuC,IAAD,EACtCiB,mBAASR,GAD6B,mBACjES,EADiE,KACtDC,EADsD,OAEtCF,oBAAS,GAF6B,mBAEjEG,EAFiE,KAEtDC,EAFsD,OAGxCJ,oBAAS,GAH+B,mBAGjEK,EAHiE,KAGvDC,EAHuD,OAI9BN,mBAKxC,IATsE,mBAIjEO,EAJiE,KAIlDC,EAJkD,OAU9BR,mBAKxC,IAfsE,mBAUjES,EAViE,KAUlDC,EAVkD,KAiBlEC,EAAc,SAAClB,GACnB,IAoBMmB,EAAYnB,EAAKoB,OAAOC,cACxBC,EAAWtB,EAAKuB,MAAMF,cAtB0B,EAC5B,WACxB,IAAMG,EAAa,GAGbC,EAAI,YAAOtB,GACXuB,EAAM,YAAOvB,GAYnB,OAXAsB,EAAKE,SAAQ,SAAAC,GACX,IAAIC,EACAC,EACJ,GACED,EAAQE,KAAKC,MAAMD,KAAKE,SAAWP,EAAOQ,QAC1CJ,EAAQJ,EAAOG,SACRD,IAAQE,GACjBN,EAAWI,GAAOE,EAClBJ,EAAOS,OAAON,EAAO,MAGhB,CAACL,EAfS,GACO,IAmBsBY,GAvBM,mBAuB/CZ,EAvB+C,KAuBnCa,EAvBmC,KAuBzBC,EAvByB,KAkCtD,MATsB,CACpBC,SAAUvC,EAAKuC,SACfnB,OAAQD,EACRI,MAAOD,EACPE,aACAa,WACAC,oBAMJE,qBAAU,YACY,uCAAG,sCAAAC,EAAA,sDACfC,EAAaC,OAAOjB,OAAO5B,GAC3B8C,EAAYb,KAAKC,MAAMD,KAAKE,SAAWS,EAAWR,QAClDK,EAAWG,EAAWE,GAUtBC,EAAW,CACf7C,KAAM,CACJ,CACEoB,OAAQ,oBACRmB,SAAU,SACVhB,MACE,wHAKRuB,QAAQC,IAAIR,EAAUM,EAAS7C,MAEzBA,EAAO6C,EAAS7C,KAAK,GACrBgD,EAA+B9B,EAAYlB,GACjDS,EAAa,EAAD,GAAMV,EAAN,CAA0BC,KAAMgD,KAC5CrC,GAAa,GA7BQ,2CAAH,qDA+BpBsC,KACC,IAEHT,qBAAU,WAAa,IAAD,EAC4BhC,EAAUR,KAAlDuB,EADY,EACZA,MAAOH,EADK,EACLA,OAAQiB,EADH,EACGA,SAAUb,EADb,EACaA,WACjC,GAAKD,EAAL,CAEA,IAAM2B,EAAM,UAAG3B,GAAH,OAAWH,GAAS+B,MAAM,IAAIC,OAAM,SAAAvD,GAC9C,OAAOwC,EAASxC,KAAU2B,EAAW3B,MAGnCqD,GAAKrC,EAAYqC,MACpB,CAAC1C,EAAUR,KAAMY,IAEpB,IA+BMyC,EAAU,SAACC,GACf,IAAMC,EAAM,YAAOzC,GACnByC,EAAOC,KAAK,CACVnB,SAAS,EAAD,GAAO7B,EAAUR,KAAKqC,UAC9BC,gBAAgB,EAAD,GAAO9B,EAAUR,KAAKsC,mBAGnCtB,EAAckB,QAAQjB,EAAiB,IAC3CF,EAAiBwC,GAvCI,SAAC,GAA8C,IAA5CE,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,cAgB7B1D,EAAI,KAAQQ,EAAUR,MACtBqC,EAAQ,KAAQrC,EAAKqC,UAC3BA,EAASoB,GAAaC,EACtB,IAAMpB,EAlBqB,SAACqB,GAG1B,IAAMC,EAAa,GAGbC,EAAWrD,EAAUR,KAAKsC,gBAAgBoB,GAMhD,OALIG,IAAUF,EAAIE,GAAY,IAE9BlB,OAAOlB,KAAKkC,GAAKhC,SAAQ,SAAAC,GACnB+B,EAAI/B,KAAMgC,EAAWD,EAAI/B,IAAQA,MAEhCgC,EAMeE,CAAmBzB,GAC3CrC,EAAKqC,SAAWA,EAChBrC,EAAKsC,gBAAkBA,EAEvB7B,EAAa,EAAD,GACPD,EADO,CAEVR,OACAC,kBAAmB,GACnBC,sBAAuB,MAazB6D,CAAeT,IAGXU,EAAW,WACf,IAAMT,EAAM,YAAOzC,GACbmD,EAAgBV,EAAOW,MAE7B,GAAID,EAAe,CACjB,IAAMjE,EAAI,KAAQQ,EAAUR,MAGtBmE,EAAM,YAAOnD,GACnBmD,EAAOX,KAAK,CACVnB,SAAS,EAAD,GAAOrC,EAAKqC,UACpBC,gBAAgB,EAAD,GAAOtC,EAAKsC,mBAG7BtC,EAAKqC,SAAW4B,EAAc5B,SAC9BrC,EAAKsC,gBAAkB2B,EAAc3B,gBAErCrB,EAAiBkD,GACjBpD,EAAiBwC,GACjB9C,EAAa,EAAD,GAAMD,EAAN,CAAiBR,YAI3BoE,EAAW,WACf,IAAMD,EAAM,YAAOnD,GACbqD,EAAgBF,EAAOD,MAC7B,GAAIG,EAAe,CACjB,IAAMrE,EAAI,KAAQQ,EAAUR,MAGtBuD,EAAM,YAAOzC,GACnByC,EAAOC,KAAK,CACVnB,SAAS,EAAD,GAAOrC,EAAKqC,UACpBC,gBAAgB,EAAD,GAAOtC,EAAKsC,mBAG7BtC,EAAKqC,SAAWgC,EAAchC,SAC9BrC,EAAKsC,gBAAkB+B,EAAc/B,gBAErCvB,EAAiBwC,GACjBtC,EAAiBkD,GACjB1D,EAAa,EAAD,GAAMD,EAAN,CAAiBR,YAI3BsE,EAAsB,SAACpE,GAC3BO,EAAa,EAAD,GAAMD,EAAN,CAAiBN,2BACzBM,EAAUP,mBACZsE,YAAW,WACTlB,EAAQ,CACNI,UAAWjD,EAAUP,kBACrByD,cAAexD,MAEhB,MAIDsE,EAAkB,SAACvE,GACvBQ,EAAa,EAAD,GAAMD,EAAN,CAAiBP,uBACzBO,EAAUN,uBACZqE,YAAW,WACTlB,EAAQ,CACNI,UAAWxD,EACXyD,cAAelD,EAAUN,0BAE1B,MAIDuE,EAAe,SAACC,EAAaC,GAA+B,IAAD,EACvBnE,EAAUR,KAA1CwB,EADuD,EACvDA,WAAYc,EAD2C,EAC3CA,gBACdsC,EAASF,EAAIvB,MAAM,KAAKQ,KAAI,SAACkB,EAAMC,GAAP,OAChC,yBAAKlD,IAAG,UAAK+C,EAAL,aAAcG,GAAaC,MAAO,CAAEC,QAAS,iBAClDH,EAAK1B,MAAM,IAAIQ,KAAI,SAAC9D,EAAMoF,GACzB,IAAIvB,EAAgBlC,EAAW3B,GAC3BqF,EAAY5C,EAAgBoB,GAChC,OAAKA,GAUEwB,IAAWA,EAAY,KAE1B,kBAAC,EAAD,CACEtD,IAAG,UAAK+C,EAAL,aAAcG,EAAd,YAA2BG,GAC9B1F,QAAS2F,EACT1F,WAAYkE,EACZjE,QAAS6E,EACT5E,WAAYgE,IAAkBlD,EAAUN,0BAhB5CwD,EAAgB7D,EAChBqF,EAAYrF,EAEV,kBAAC,EAAD,CACE+B,IAAG,UAAK+C,EAAL,aAAcG,EAAd,YAA2BG,GAC9BpF,KAAMA,QAgBd,kBAAC,EAAD,CAAO+B,IAAG,UAAK+C,EAAL,iBAAkBG,SAIhC,OAAO,oCAAGF,IAyFNO,EAAyB,SAACC,KAK1BC,EAAiB,SAACD,GACtB,IAAME,EAAaF,EAAExD,IAAIP,cACC,IAAtBiE,EAAWpD,QAAgB,WAAWqD,KAAKD,KACzC9E,EAAUP,kBAAmBqE,EAAoBgB,GAChDd,EAAgBc,IAEJ,MAAfA,EACFtB,IACwB,MAAfsB,GACTlB,KAIEoB,EAAW,WACf,IAAMC,EAAaC,SAASC,eAAe,cACvCF,GAAYA,EAAWG,SAO7B,OAJIF,UACFF,IAGK9E,EACL,4CAEA,0BAAMvB,UAAU,YAAYM,QAAS+F,GACnC,yBAAKrG,UAAU,eAtCI,WAAoB,IACjCoD,EAAa/B,EAAUR,KAAvBuC,SACR,OACE,6BAASpD,UAAU,wBAAnB,aAAqDoD,GAoClDsD,GAhDa,WAAoB,IAC9BtE,EAAUf,EAAUR,KAApBuB,MACR,OACE,6BAASpC,UAAU,qBAChBsF,EAAalD,EAAO,UA6CpBuE,GA1Dc,WAAoB,IAC/B1E,EAAWZ,EAAUR,KAArBoB,OACR,OACE,6BAASjC,UAAU,sBAChBsF,EAAarD,EAAQ,WAuDrB2E,GA1EgB,WAAoB,IACjC1D,EAAa7B,EAAUR,KAAvBqC,SACFuC,EAASzE,EAAWwD,KAAI,SAAA/B,GAAG,OAC/B,kBAAC,EAAD,CACEA,IAAKA,EACLrC,QAAS8C,EAAST,GAAOS,EAAST,GAAO,IACzCpC,WAAYoC,EACZnC,QAAS+E,EACT9E,WAAYkC,IAAQpB,EAAUP,uBAIlC,OAAO,6BAASd,UAAU,wBAAwByF,GA+D7CoB,GA9FH,6BAAS7G,UAAU,qBACjB,2BACE8G,GAAG,aACHC,WAAYb,EACZc,SAAUhB,EACVrD,MAAOtB,EAAUN,sBACjB6E,MAAO,CAAEqB,MAAO,EAAGC,OAAQ,EAAGC,OAAQ,UAExC,0BAAMnH,UAAWqB,EAAUP,kBAAoB,GAAK,UACjDO,EAAUP,mBAEZ,oBACD,0BAAMd,UAAWqB,EAAUP,kBAAoB,SAAW,IACvDO,EAAUN,wBAtCf,6BAASf,UAAU,wBACjB,0BAAMA,UAAU,WACd,4BACEA,UAAU,MACVoH,UAAWzF,EAAcoB,OACzBzC,QAASuE,GAET,uBAAG7E,UAAU,kBAGjB,0BAAMA,UAAU,WACd,4BACEA,UAAU,MACVoH,UAAWvF,EAAckB,OACzBzC,QAAS2E,GAET,uBAAGjF,UAAU,mBA0GhByB,EAAW,iDAA8B,OC5ZlD,IASe4F,EATO,WACpB,OACE,yBAAKrH,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAasH,MAAO,MCENC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASC,eAAe,SDmI3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9cc80523.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Navbar.css';\r\n\r\n// interface NavbarProps {\r\n//   plainChar: string;\r\n//   encryptedChar: string;\r\n// }\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <header className='Navbar'>\r\n      <div className='Navbar-logo'>EncryptedQuote</div>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <a className='Navbar-link' href='#'>\r\n              Home\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a className='Navbar-link' href='#'>\r\n              About\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a className='Navbar-link' href='#'>\r\n              Contact\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Character.css';\r\n\r\ninterface CharacterProps {\r\n  topChar: string;\r\n  bottomChar: string;\r\n  onClick(bottomChar: string): void;\r\n  isSelected: boolean;\r\n}\r\n\r\nexport default function Character(props: CharacterProps) {\r\n  const { topChar, bottomChar, onClick, isSelected } = props;\r\n\r\n  const handleClick = () => {\r\n    onClick(bottomChar);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Character ${isSelected ? 'Character--selected' : ''}`}\r\n      onClick={handleClick}\r\n    >\r\n      <div className='Character-top'>{topChar}</div>\r\n      <div className='Character-bottom'>{bottomChar}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Space.css';\r\n\r\nexport default function Space() {\r\n  return <div className='Space'></div>;\r\n}\r\n","import React from 'react';\r\n\r\nimport './Punctuation.css';\r\n\r\ninterface PunctuationProps {\r\n  char: string;\r\n}\r\n\r\nexport default function Punctuation(props: PunctuationProps) {\r\n  return (\r\n    <div className='Punctuation'>\r\n      <div className='Punctuation-top'>{props.char}</div>\r\n      <div className='Punctuation-bottom'>{props.char}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, KeyboardEvent, ChangeEvent } from 'react';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport Character from './Character';\r\nimport Space from './Space';\r\nimport Punctuation from './Punctuation';\r\n\r\n// import '../images/undo-solid.svg'\r\nimport './CryptoQuote.css';\r\n\r\ninterface CryptoQuoteProps {\r\n  count: number;\r\n}\r\n\r\nenum quoteCategory {\r\n  Movies = 'movies',\r\n  Famous = 'famous'\r\n}\r\n\r\ntype QuoteData = {\r\n  author: string;\r\n  category: quoteCategory;\r\n  quote: string;\r\n};\r\n\r\ntype AugmentedData = {\r\n  author: string;\r\n  category: quoteCategory;\r\n  quote: string;\r\n  encryptMap: { [key: string]: string };\r\n  guessMap: { [key: string]: string };\r\n  reverseGuessMap: { [key: string]: string };\r\n};\r\n\r\ntype Move = {\r\n  plainChar: string;\r\n  encryptedChar: string;\r\n};\r\n\r\nconst INITIAL_GAME_STATE = {\r\n  data: {} as AugmentedData,\r\n  selectedPlainChar: '',\r\n  selectedEncryptedChar: ''\r\n};\r\n\r\nconst alphaArray = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r\n\r\nexport default function CryptoQuote(props: CryptoQuoteProps): JSX.Element {\r\n  const [gameState, setGameState] = useState(INITIAL_GAME_STATE);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isWinner, setIsWinner] = useState(false);\r\n  const [undoGameState, setUndoGameState] = useState<\r\n    {\r\n      guessMap: { [key: string]: string };\r\n      reverseGuessMap: { [key: string]: string };\r\n    }[]\r\n  >([]);\r\n  const [redoGameState, setRedoGameState] = useState<\r\n    {\r\n      guessMap: { [key: string]: string };\r\n      reverseGuessMap: { [key: string]: string };\r\n    }[]\r\n  >([]);\r\n\r\n  const augmentData = (data: QuoteData): AugmentedData => {\r\n    const generateCryptoMap = () => {\r\n      const encryptMap = {} as { [key: string]: string };\r\n      const guessMap = {} as { [key: string]: string };\r\n      const reverseGuessMap = {} as { [key: string]: string };\r\n      const keys = [...alphaArray];\r\n      const values = [...alphaArray];\r\n      keys.forEach(key => {\r\n        let index: number;\r\n        let value: string;\r\n        do {\r\n          index = Math.floor(Math.random() * values.length);\r\n          value = values[index];\r\n        } while (key === value);\r\n        encryptMap[key] = value;\r\n        values.splice(index, 1);\r\n      });\r\n\r\n      return [encryptMap, guessMap, reverseGuessMap];\r\n    };\r\n\r\n    const augAuthor = data.author.toUpperCase();\r\n    const augQuote = data.quote.toUpperCase();\r\n    const [encryptMap, guessMap, reverseGuessMap] = generateCryptoMap();\r\n\r\n    const augmentedData = {\r\n      category: data.category,\r\n      author: augAuthor,\r\n      quote: augQuote,\r\n      encryptMap,\r\n      guessMap,\r\n      reverseGuessMap\r\n    };\r\n\r\n    return augmentedData;\r\n  };\r\n\r\n  useEffect((): void => {\r\n    const getRandomQuote = async () => {\r\n      const categories = Object.values(quoteCategory);\r\n      const randomCat = Math.floor(Math.random() * categories.length);\r\n      const category = categories[randomCat];\r\n\r\n      // const response: AxiosResponse = await axios.get(\r\n      //   'https://wmoore98-quote.herokuapp.com/api/quotes'\r\n      // );\r\n\r\n      // const response: AxiosResponse = await axios.get(\r\n      //   'http://localhost:3001/api/quotes'\r\n      // );\r\n\r\n      const response = {\r\n        data: [\r\n          {\r\n            author: 'Bjarne Stroustrup',\r\n            category: 'Famous',\r\n            quote:\r\n              'C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do, it blows away your whole leg.'\r\n          }\r\n        ]\r\n      };\r\n\r\n      console.log(category, response.data);\r\n\r\n      const data = response.data[0] as QuoteData;\r\n      const augmentedData: AugmentedData = augmentData(data);\r\n      setGameState({ ...INITIAL_GAME_STATE, data: augmentedData });\r\n      setIsLoading(false);\r\n    };\r\n    getRandomQuote();\r\n  }, []);\r\n\r\n  useEffect((): void => {\r\n    const { quote, author, guessMap, encryptMap } = gameState.data;\r\n    if (!quote) return;\r\n\r\n    const win = `${quote}${author}`.split('').every(char => {\r\n      return guessMap[char] === encryptMap[char];\r\n    });\r\n\r\n    if (win) setIsWinner(win);\r\n  }, [gameState.data, isWinner]);\r\n\r\n  const updateGuessMap = ({ plainChar, encryptedChar }: Move): void => {\r\n    const generateReverseMap = (map: {\r\n      [key: string]: string;\r\n    }): { [key: string]: string } => {\r\n      const reverseMap = {} as { [key: string]: string };\r\n\r\n      // remove encryptedChar from guessMap - if previously guessed\r\n      const oldGuess = gameState.data.reverseGuessMap[encryptedChar];\r\n      if (oldGuess) map[oldGuess] = '';\r\n\r\n      Object.keys(map).forEach(key => {\r\n        if (map[key]) reverseMap[map[key]] = key;\r\n      });\r\n      return reverseMap;\r\n    };\r\n\r\n    const data = { ...gameState.data };\r\n    const guessMap = { ...data.guessMap };\r\n    guessMap[plainChar] = encryptedChar;\r\n    const reverseGuessMap = generateReverseMap(guessMap);\r\n    data.guessMap = guessMap;\r\n    data.reverseGuessMap = reverseGuessMap;\r\n\r\n    setGameState({\r\n      ...gameState,\r\n      data,\r\n      selectedPlainChar: '',\r\n      selectedEncryptedChar: ''\r\n    });\r\n  };\r\n\r\n  const newMove = (move: Move): void => {\r\n    const undoGS = [...undoGameState];\r\n    undoGS.push({\r\n      guessMap: { ...gameState.data.guessMap },\r\n      reverseGuessMap: { ...gameState.data.reverseGuessMap }\r\n    });\r\n\r\n    if (redoGameState.length) setRedoGameState([]);\r\n    setUndoGameState(undoGS);\r\n    updateGuessMap(move);\r\n  };\r\n\r\n  const undoMove = (): void => {\r\n    const undoGS = [...undoGameState];\r\n    const lastGameState = undoGS.pop();\r\n\r\n    if (lastGameState) {\r\n      const data = { ...gameState.data };\r\n\r\n      // save current game state for redo\r\n      const redoGS = [...redoGameState];\r\n      redoGS.push({\r\n        guessMap: { ...data.guessMap },\r\n        reverseGuessMap: { ...data.reverseGuessMap }\r\n      });\r\n\r\n      data.guessMap = lastGameState.guessMap;\r\n      data.reverseGuessMap = lastGameState.reverseGuessMap;\r\n\r\n      setRedoGameState(redoGS);\r\n      setUndoGameState(undoGS);\r\n      setGameState({ ...gameState, data });\r\n    }\r\n  };\r\n\r\n  const redoMove = (): void => {\r\n    const redoGS = [...redoGameState];\r\n    const nextGameState = redoGS.pop();\r\n    if (nextGameState) {\r\n      const data = { ...gameState.data };\r\n\r\n      // save current game state for undo\r\n      const undoGS = [...undoGameState];\r\n      undoGS.push({\r\n        guessMap: { ...data.guessMap },\r\n        reverseGuessMap: { ...data.reverseGuessMap }\r\n      });\r\n\r\n      data.guessMap = nextGameState.guessMap;\r\n      data.reverseGuessMap = nextGameState.reverseGuessMap;\r\n\r\n      setUndoGameState(undoGS);\r\n      setRedoGameState(redoGS);\r\n      setGameState({ ...gameState, data });\r\n    }\r\n  };\r\n\r\n  const selectEncryptedChar = (selectedEncryptedChar: string): void => {\r\n    setGameState({ ...gameState, selectedEncryptedChar });\r\n    if (gameState.selectedPlainChar) {\r\n      setTimeout(() => {\r\n        newMove({\r\n          plainChar: gameState.selectedPlainChar,\r\n          encryptedChar: selectedEncryptedChar\r\n        });\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const selectPlainChar = (selectedPlainChar: string): void => {\r\n    setGameState({ ...gameState, selectedPlainChar });\r\n    if (gameState.selectedEncryptedChar) {\r\n      setTimeout(() => {\r\n        newMove({\r\n          plainChar: selectedPlainChar,\r\n          encryptedChar: gameState.selectedEncryptedChar\r\n        });\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const renderString = (str: string, type: string): JSX.Element => {\r\n    const { encryptMap, reverseGuessMap } = gameState.data;\r\n    const result = str.split(' ').map((word, wordIndex) => (\r\n      <div key={`${type}:w${wordIndex}`} style={{ display: 'inline-block' }}>\r\n        {word.split('').map((char, charIndex) => {\r\n          let encryptedChar = encryptMap[char];\r\n          let guessChar = reverseGuessMap[encryptedChar];\r\n          if (!encryptedChar) {\r\n            encryptedChar = char;\r\n            guessChar = char;\r\n            return (\r\n              <Punctuation\r\n                key={`${type}:w${wordIndex}c${charIndex}`}\r\n                char={char}\r\n              />\r\n            );\r\n          } else {\r\n            if (!guessChar) guessChar = '_';\r\n            return (\r\n              <Character\r\n                key={`${type}:w${wordIndex}c${charIndex}`}\r\n                topChar={guessChar}\r\n                bottomChar={encryptedChar}\r\n                onClick={selectEncryptedChar}\r\n                isSelected={encryptedChar === gameState.selectedEncryptedChar}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n        <Space key={`${type}:space${wordIndex}`} />\r\n      </div>\r\n    ));\r\n\r\n    return <>{result}</>;\r\n  };\r\n\r\n  const renderControls = (): JSX.Element => {\r\n    return (\r\n      <section className='CryptoQuote-controls'>\r\n        <span className='undoBtn'>\r\n          <button\r\n            className='btn'\r\n            disabled={!undoGameState.length}\r\n            onClick={undoMove}\r\n          >\r\n            <i className='fas fa-undo'></i>\r\n          </button>\r\n        </span>\r\n        <span className='undoBtn'>\r\n          <button\r\n            className='btn'\r\n            disabled={!redoGameState.length}\r\n            onClick={redoMove}\r\n          >\r\n            <i className='fas fa-redo'></i>\r\n          </button>\r\n        </span>\r\n      </section>\r\n    );\r\n  };\r\n\r\n  const renderInput = (): JSX.Element => {\r\n    return (\r\n      <section className='CryptoQuote-input'>\r\n        <input\r\n          id='inputField'\r\n          onKeyPress={handleKeyPress}\r\n          onChange={handleInputFieldChange}\r\n          value={gameState.selectedEncryptedChar}\r\n          style={{ width: 0, height: 0, border: 'none' }}\r\n        />\r\n        <span className={gameState.selectedPlainChar ? '' : 'active'}>\r\n          {gameState.selectedPlainChar}\r\n        </span>\r\n        {' is encrypted as '}\r\n        <span className={gameState.selectedPlainChar ? 'active' : ''}>\r\n          {gameState.selectedEncryptedChar}\r\n        </span>\r\n      </section>\r\n    );\r\n  };\r\n\r\n  const renderGuessMap = (): JSX.Element => {\r\n    const { guessMap } = gameState.data;\r\n    const result = alphaArray.map(key => (\r\n      <Character\r\n        key={key}\r\n        topChar={guessMap[key] ? guessMap[key] : '_'}\r\n        bottomChar={key}\r\n        onClick={selectPlainChar}\r\n        isSelected={key === gameState.selectedPlainChar}\r\n      />\r\n    ));\r\n\r\n    return <section className='CryptoQuote-guessMap'>{result}</section>;\r\n  };\r\n\r\n  const renderAuthor = (): JSX.Element => {\r\n    const { author } = gameState.data;\r\n    return (\r\n      <section className='CryptoQuote-author'>\r\n        {renderString(author, 'author')}\r\n      </section>\r\n    );\r\n  };\r\n\r\n  const renderQuote = (): JSX.Element => {\r\n    const { quote } = gameState.data;\r\n    return (\r\n      <section className='CryptoQuote-quote'>\r\n        {renderString(quote, 'quote')}\r\n      </section>\r\n    );\r\n  };\r\n\r\n  const renderCategory = (): JSX.Element => {\r\n    const { category } = gameState.data;\r\n    return (\r\n      <section className='CryptoQuote-category'>Category: {category}</section>\r\n    );\r\n  };\r\n\r\n  const handleInputFieldChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    // console.log('onChange', e);\r\n    // console.log(e.target);\r\n  };\r\n\r\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>): void => {\r\n    const keyPressed = e.key.toUpperCase();\r\n    if (keyPressed.length === 1 && /[A-Z]{1}/.test(keyPressed)) {\r\n      if (gameState.selectedPlainChar) selectEncryptedChar(keyPressed);\r\n      else selectPlainChar(keyPressed);\r\n    }\r\n    if (keyPressed === ',') {\r\n      undoMove();\r\n    } else if (keyPressed === '.') {\r\n      redoMove();\r\n    }\r\n  };\r\n\r\n  const setFocus = (): void => {\r\n    const inputField = document.getElementById('inputField');\r\n    if (inputField) inputField.focus();\r\n  };\r\n\r\n  if (document) {\r\n    setFocus();\r\n  }\r\n\r\n  return isLoading ? (\r\n    <main>Loading...</main>\r\n  ) : (\r\n    <main className='container' onClick={setFocus}>\r\n      <div className='CryptoQuote'>\r\n        {renderCategory()}\r\n        {renderQuote()}\r\n        {renderAuthor()}\r\n        {renderGuessMap()}\r\n        {renderInput()}\r\n        {renderControls()}\r\n        {isWinner ? <div>You solved it!!!</div> : null}\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport CryptoQuote from './components/CryptoQuote';\n\nconst App: React.FC = () => {\n  return (\n    <div className='App'>\n      <Navbar />\n      <CryptoQuote count={1} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}